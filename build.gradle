buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

sourceCompatibility = targetCompatibility = 1.8

def parseprops(File cfg) {
    cfg.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

ext.ref = parseprops(file('build.properties'))
ext.ref.mod_deps = parseprops(file('mod_deps.properties'))

group = "org.teamrtg.rtg"
archivesBaseName = "RTG-" + (ref.mc_version as String)
version = ref.mod_version

//repositories {
//    maven { url "http://files.minecraftforge.net/maven" } //BiomesOPlenty
//    maven { url 'https://dl.bintray.com/shinoow/maven/' } //AbyssalCraft
//}

dependencies {
    provided fileTree(dir: 'libs', include: '*.jar')
    //deobfProvided "com.github.glitchfiend.biomesoplenty:BiomesOPlenty:" + (ref.mod_deps.bopver as String) + ":deobf"
    //deobfProvided 'com.shinoow.abyssalcraft:AbyssalCraft:' + (ref.mod_deps.acver as String) + ':dev'
}

minecraft {
    version 		 = (ref.mcf_suffix!='') ? ref.mcf_version + '-' + ref.mcf_suffix : ref.mcf_version
    mappings 		 = ref.mcp_mappings
    runDir 			 = "run"
    makeObfSourceJar = false
    replace '@MOD_VERSION@', project.version
    replace '0.0-MCF+MINVER', ref.mcf_minver
    replace '9001.0-MCF+MAXVER', ref.mcf_maxver
    if (ref.mod_deps!="") replace ';after:MODDEPS', ";" + (ref.mod_deps.depstring as String)
    else replace ';after:MODDEPS', ''
    replaceIn 'ModInfo.java'
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
		expand (['version':ref.mod_version, 'mcversion':ref.mc_version,])
	}
	from(sourceSets.main.resources.srcDirs) {exclude 'mcmod.info'}
}

sourceJar {classifier = 'src'}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'rtg/api/**/*'
    classifier = 'api'
}
artifacts {archives apiJar}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}
artifacts {archives devJar}

// For a debugging session used 'gradle -DEBUG [runClient|runServer]'
allprojects {
    tasks.withType(JavaExec) {
        jvmArgs '-Xms1G', '-Xmx4G'
        if (System.getProperty("EBUG")!=null)
            jvmArgs '-agentlib:jdwp=transport=dt_socket,address=localhost:5005,server=y,suspend=y'
    }
}

// use -Dwarn|-Dwarnall CLI arguement for verbose compiler warnings
// -Dwarn covers the 3 most common warnings only
tasks.withType(JavaCompile) {
    if (System.getProperty("warn") != null)
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:rawtypes" << "-Xlint:deprecation"
    if (System.getProperty("warnall") != null)
        options.compilerArgs << "-Xlint:all"
}
